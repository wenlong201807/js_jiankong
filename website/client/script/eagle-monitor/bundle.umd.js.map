{"version":3,"file":"bundle.umd.js","sources":["../../../../eagle-sdk/perf.js","../../../../eagle-sdk/xhr.js","../../../../eagle-sdk/util/xpath.js","../../../../eagle-sdk/behavior.js","../../../../eagle-sdk/index.js"],"sourcesContent":["// https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceTiming\r\n\r\nlet perf = {\r\n  init: (cb) => {\r\n    let cycleFreq = 100; // 循环轮询的时间\r\n    let isDOMReady = false;\r\n    let isOnload = false;\r\n    let performance = window.performance || window.mozPerformance || window.msPerformance || window.webkitPerformance;\r\n\r\n    let Util = {\r\n      addEventListener: function (name, callback, useCapture) {\r\n        if (window.addEventListener) {\r\n          return window.addEventListener(name, callback, useCapture);\r\n        } else if (window.attachEvent) {\r\n          return window.attachEvent('on' + name, callback);\r\n        }\r\n      },\r\n\r\n      // dom加载完成 图片，字体可能没有加载完成\r\n      domready: function (callback) {\r\n        if ( isOnload === true ) { return void 0; }\r\n        let timer = null;\r\n\r\n        // \r\n        if (document.readyState === 'interactive') {\r\n          runCheck();\r\n        } else if (document.addEventListener) {\r\n          document.addEventListener('DOMContentLoaded', function () {\r\n            runCheck();\r\n          }, false);\r\n        } else if (document.attachEvent) {\r\n          document.attachEvent('onreadystatechange', function () {\r\n            runCheck();\r\n          });\r\n        }\r\n\r\n        function runCheck() {\r\n          if ( performance.timing.domInteractive ) {\r\n            clearTimeout(timer);\r\n            callback();\r\n            isDOMReady = true;\r\n          } else {\r\n            timer = setTimeout(runCheck, cycleFreq);\r\n          }\r\n        }\r\n      },\r\n\r\n      // 页面加载完成\r\n      onload: function (callback) {\r\n        let timer = null;\r\n\r\n        if (document.readyState === 'complete') {\r\n          runCheck();\r\n        } else {\r\n          Util.addEventListener('load', function () {\r\n            // 开始循环检测，是否 domContentLoaded 已经完成\r\n            runCheck();\r\n          }, false);\r\n        }\r\n\r\n        function runCheck() {\r\n          if (performance.timing.loadEventEnd) {\r\n            // 停止循环检测，运行callback\r\n            clearTimeout(timer);\r\n            callback();\r\n            isOnload = true;\r\n          } else {\r\n            // 再去循环检测\r\n            timer = setTimeout(runCheck, cycleFreq);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    let reportPerf = function () {\r\n      if (!performance) {\r\n        return void 0;\r\n      }\r\n\r\n      // 过滤无效数据；会出现负值，意外情况处理\r\n      function filterTime(a, b) {\r\n        return (a > 0 && b > 0 && (a - b) >= 0) ? (a - b) : undefined;\r\n      }\r\n\r\n      // append data from window.performance\r\n      let timing = performance.timing;\r\n\r\n      // 获取到的数据应该给sdk上层，去上传这些数据\r\n      let perfData = {\r\n        // 网络建连\r\n        pervPage: filterTime(timing.fetchStart, timing.navigationStart), // 上一个页面\r\n        redirect: filterTime(timing.responseEnd, timing.redirectStart), // 页面重定向时间\r\n        dns: filterTime(timing.domainLookupEnd, timing.domainLookupStart), // DNS查找时间\r\n        connect: filterTime(timing.connectEnd, timing.connectStart), // TCP建连时间\r\n        network: filterTime(timing.connectEnd, timing.navigationStart), // 网络总耗时\r\n\r\n        // 网络接收\r\n        send: filterTime(timing.responseStart, timing.requestStart), // 前端从发送到接收到后端第一个返回\r\n        receive: filterTime(timing.responseEnd, timing.responseStart), // 接受页面时间\r\n        request: filterTime(timing.responseEnd, timing.requestStart), // 请求页面总时间\r\n\r\n        // 前端渲染\r\n        dom: filterTime(timing.domComplete, timing.domLoading), // dom解析时间\r\n        loadEvent: filterTime(timing.loadEventEnd, timing.loadEventStart), // loadEvent时间\r\n        frontend: filterTime(timing.loadEventEnd, timing.domLoading), // 前端总时间 // 主要通过缓存，算法优化[静态资源多少导致]\r\n\r\n        // 关键阶段\r\n        load: filterTime(timing.loadEventEnd, timing.navigationStart), // 页面完全加载总时间\r\n        domReady: filterTime(timing.domContentLoadedEventStart, timing.navigationStart), // domready时间\r\n        interactive: filterTime(timing.domInteractive, timing.navigationStart), // 可操作时间\r\n        ttfb: filterTime(timing.responseStart, timing.navigationStart),  // 首字节时间\r\n      };\r\n\r\n      return perfData;\r\n    };\r\n\r\n    Util.domready(function () {\r\n      let perfData = reportPerf('domready');\r\n      perfData.type = 'domready';\r\n      cb(perfData);\r\n      // 获取到数据应该给sdk上层，去上传这个数据\r\n    });\r\n\r\n    Util.onload(function () {\r\n      let perfData = reportPerf('onload');\r\n      perfData.type = 'onload';\r\n      cb(perfData);\r\n      // 获取到数据应该给sdk上层，去上传这个数据\r\n    });\r\n  }\r\n};\r\n\r\nexport default perf;\r\n","/**\r\n * 面向切面编程\r\n * 在原型上扩展自定义需要的内容\r\n * 自身的请求不用拦截，否则形成循环上报\r\n*/\r\nlet xhrHook = {\r\n  init: (cb) => {\r\n    // xhr hook\r\n    let xhr = window.XMLHttpRequest; // 获取原型引用\r\n    if (xhr._eagle_flag === true) { // 如果有人引入了性能监控的sdk，避免多次被引用\r\n      return void 0;\r\n    }\r\n    xhr._eagle_flag = true;\r\n\r\n    let _originOpen = xhr.prototype.open;\r\n    // 面向切面编程思想: 在原型上扩展原有方法的功能，同时保证原来的功能不受影响\r\n    xhr.prototype.open = function (method, url, async, user, password) {\r\n      // TODO eagle url check\r\n      this._eagle_xhr_info = {\r\n        url: url,\r\n        method: method,\r\n        status: null\r\n      };\r\n      return _originOpen.apply(this, arguments);\r\n    };\r\n\r\n    let _originSend = xhr.prototype.send;\r\n    xhr.prototype.send = function (value) {\r\n      let _self = this;\r\n      this._eagle_start_time = Date.now(); // 记录开始的时间\r\n\r\n      // 高阶函数\r\n      let ajaxEnd = (event) => () => {\r\n        if (_self.response) {\r\n          let responseSize = null;\r\n          switch(_self.responseType) {\r\n            case 'json':\r\n              responseSize = JSON && JSON.stringify(_this.response).length;\r\n              break;\r\n            case 'blob':\r\n            case 'moz-blob':\r\n              responseSize = _self.response.size;\r\n              break;\r\n            case 'arraybuffer':\r\n              responseSize = _self.response.byteLength;\r\n            case 'document':\r\n              responseSize = _self.response.documentElement && _self.response.documentElement.innerHTML && (_self.response.documentElement.innerHTML.length + 28);\r\n              break;\r\n            default:\r\n              responseSize = _self.response.length;\r\n          }\r\n          _self._eagle_xhr_info.event = event;\r\n          _self._eagle_xhr_info.status = _self.status;\r\n          _self._eagle_xhr_info.success = (_self.status >= 200 && _self.status <= 206) || _self.status === 304;\r\n          _self._eagle_xhr_info.duration = Date.now() - _self._eagle_start_time; // 监控系统自己报错，业务代码捕获错误\r\n          _self._eagle_xhr_info.responseSize = responseSize;\r\n          _self._eagle_xhr_info.requestSize = value ? value.length : 0; // value 未必有length 属性\r\n          _self._eagle_xhr_info.type = 'xhr';\r\n          cb(this._eagle_xhr_info);\r\n        }\r\n      };\r\n\r\n      // TODO eagle url check\r\n      if (this.addEventListener) {\r\n        // 这三种状态都代表这个请求已经结束了。需要统计一些信息，并上报上去\r\n        this.addEventListener('load', ajaxEnd('load'), false);\r\n        this.addEventListener('error', ajaxEnd('error'), false);\r\n        this.addEventListener('abort', ajaxEnd('abort'), false);\r\n      } else {\r\n        let _origin_onreadystatechange = this.onreadystatechange;\r\n        this.onreadystatechange = function (event) {\r\n          if (_origin_onreadystatechange) {\r\n            _originOpen.apply(this, arguments);\r\n          }\r\n          if (this.readyState === 4) {\r\n            ajaxEnd('end')();\r\n          }\r\n        };\r\n      }\r\n      return _originSend.apply(this, arguments);\r\n    };\r\n\r\n    // 扩展fetch\r\n    // fetch hook\r\n    if (window.fetch) {\r\n      let _origin_fetch = window.fetch;\r\n      window.fetch = function () {\r\n        let startTime = Date.now();\r\n        let args = [].slice.call(arguments);\r\n\r\n        let fetchInput = args[0];\r\n        let method = 'GET';\r\n        let url;\r\n\r\n        if (typeof fetchInput === 'string') {\r\n          url = fetchInput;\r\n        } else if ('Request' in window && fetchInput instanceof window.Request) {\r\n          url = fetchInput.url;\r\n          if (fetchInput.method) { // 不传的时候，默认是get，如果写了，可能是其他方式的请求\r\n            method = fetchInput.method;\r\n          }\r\n        } else {\r\n          url = '' + fetchInput;\r\n        }\r\n\r\n        // args 是伪数组，包含的内容是实参 扩展属性，同时保证原来的功能不缺失\r\n        if (args[1] && args[1].method) {\r\n          method = args[1].method;\r\n        }\r\n\r\n        // TODO eagle check 需要上报的内容，都放在这里\r\n        let fetchData = {\r\n          method: method,\r\n          url: url,\r\n          status: null,\r\n        };\r\n\r\n        // 重写原型方法，并且按需扩展\r\n        return _origin_fetch.apply(this, args).then(function(response) {\r\n          fetchData.status = response.status;\r\n          fetchData.type = 'fetch';\r\n          fetchData.duration = Date.now() - startTime;\r\n          cb(fetchData);\r\n          return response;\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default xhrHook;\r\n","// /html/body/div[2]/ul/li[2]\r\n\r\nlet getXpath = (element) => {\r\n  if (!(element instanceof Element)) {\r\n    return void 0;\r\n  }\r\n\r\n  if (element.nodeType !== 1) {\r\n    return void 0;\r\n  }\r\n\r\n  let rootElement = document.body;\r\n  if (element === rootElement) {\r\n    return void 0;\r\n  }\r\n\r\n  // 这里可以做选择，按需确定哪些标签，哪些元素需要上报，埋点\r\n  let childIndex = (ele) => {\r\n    let parent = ele.parentNode;\r\n    let children = [].slice.call(parent.childNodes).filter(_ => _.tagName === ele.tagName);\r\n    let i = 0;\r\n    for (let _i = 0, len = children.length; _i < len; _i++) {\r\n      if (children[_i] === ele) {\r\n        i = _i + 1;\r\n        break;\r\n      }\r\n    }\r\n    return i === 0 ? '' : '[' + i + ']';\r\n  };\r\n\r\n  let xpath = '';\r\n\r\n  while (element !== document.body) {\r\n    let tag = element.tagName.toLocaleLowerCase();\r\n    let eleIndex = childIndex(element);\r\n    xpath = '/' + tag + eleIndex + xpath;\r\n    element = element.parentNode;\r\n  }\r\n\r\n  return xpath;\r\n};\r\n\r\nexport default getXpath;","import getXpath from './util/xpath.js';\r\n\r\nexport default {\r\n  init: (cb) => {\r\n    cb();\r\n    document.addEventListener('click', (e) => {\r\n      let xpath = getXpath(e.target);\r\n      console.log('xpath: ', xpath);\r\n    }, false);\r\n  }\r\n}\r\n\r\n// document.querySelector(\"body > div.box-wrap > ul > li:nth-child(1)\")\r\n\r\n// /html/body/div[2]/ul/li[1]","import perf from './perf.js';\r\nimport resources from './resources.js';\r\nimport errorCatch from './errorCatch.js';\r\nimport xhrHook from './xhr.js';\r\nimport behavior from './behavior.js';\r\n\r\n// console.log('测试可有热更新效果 h1 wacth...更新毫秒数')\r\n// perf.init((perfData) => {\r\n//   // console.log('perf', perfData);\r\n// });\r\n\r\n// resources.init((list) => {\r\n//   // console.log('resources', list);\r\n//   // console.log('resources', list.length === 1 ? list[0] : list);\r\n// });\r\n\r\n// errorCatch.init((err) => {\r\n//   console.log('errorCatch', err);\r\n// });\r\n\r\n// xhrHook.init((xhrInfo) => {\r\n//   console.log(xhrInfo);\r\n// });\r\n\r\nbehavior.init(() => {\r\n  console.log('behavior init');\r\n});\r\n\r\n// 上传服务端, 性能损耗小，体积小\r\n// new Image('url')"],"names":["getXpath","element","Element","nodeType","rootElement","document","body","childIndex","ele","parent","parentNode","children","slice","call","childNodes","filter","_","tagName","i","_i","len","length","xpath","tag","toLocaleLowerCase","eleIndex","cb","addEventListener","e","target","log","behavior","init"],"mappings":";;;;;;AAAA;;ACAA;;;;;;ACAA;;AAEA,IAAIA,WAAW,SAAXA,QAAW,CAACC,OAAD,EAAa;MACtB,EAAEA,mBAAmBC,OAArB,CAAJ,EAAmC;WAC1B,KAAK,CAAZ;;;MAGED,QAAQE,QAAR,KAAqB,CAAzB,EAA4B;WACnB,KAAK,CAAZ;;;MAGEC,cAAcC,SAASC,IAA3B;MACIL,YAAYG,WAAhB,EAA6B;WACpB,KAAK,CAAZ;;;;MAIEG,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAS;QACpBC,SAASD,IAAIE,UAAjB;QACIC,WAAW,GAAGC,KAAH,CAASC,IAAT,CAAcJ,OAAOK,UAArB,EAAiCC,MAAjC,CAAwC;aAAKC,EAAEC,OAAF,KAAcT,IAAIS,OAAvB;KAAxC,CAAf;QACIC,IAAI,CAAR;SACK,IAAIC,KAAK,CAAT,EAAYC,MAAMT,SAASU,MAAhC,EAAwCF,KAAKC,GAA7C,EAAkDD,IAAlD,EAAwD;UAClDR,SAASQ,EAAT,MAAiBX,GAArB,EAA0B;YACpBW,KAAK,CAAT;;;;WAIGD,MAAM,CAAN,GAAU,EAAV,GAAe,MAAMA,CAAN,GAAU,GAAhC;GAVF;;MAaII,QAAQ,EAAZ;;SAEOrB,YAAYI,SAASC,IAA5B,EAAkC;QAC5BiB,MAAMtB,QAAQgB,OAAR,CAAgBO,iBAAhB,EAAV;QACIC,WAAWlB,WAAWN,OAAX,CAAf;YACQ,MAAMsB,GAAN,GAAYE,QAAZ,GAAuBH,KAA/B;cACUrB,QAAQS,UAAlB;;;SAGKY,KAAP;CArCF;;ACAA,eAAe;QACP,cAACI,EAAD,EAAQ;;aAEHC,gBAAT,CAA0B,OAA1B,EAAmC,UAACC,CAAD,EAAO;UACpCN,QAAQtB,SAAS4B,EAAEC,MAAX,CAAZ;cACQC,GAAR,CAAY,SAAZ,EAAuBR,KAAvB;KAFF,EAGG,KAHH;;;;;;;CAHJ;;ACsBAS,SAASC,IAAT,CAAc,YAAM;UACVF,GAAR,CAAY,eAAZ;CADF;;;;;;;"}